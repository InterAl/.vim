snippet it "Testing - it"
it('${1:description}', () => {
	${2:body}
});
endsnippet

snippet describe "Testing - describe"
describe('${1:description}', () => {
	beforeEach(() => {
	
	});

	it('${2:description}', () => {
		${3:body}
	});
});
endsnippet

snippet before "Testing - beforeEach"
beforeEach(() => {
	${1}
});
endsnippet

snippet fun "function"
function ${1:name}(${2}) {
	${3}${VISUAL}
}
endsnippet

snippet try "try/catch"
try {
    ${1:${VISUAL:body}}
} catch (err) {
    console.error('${2:message}');
    throw err;
}
endsnippet

snippet afi "inlined named arrow function"
(${1}) => ${2}
endsnippet

snippet afim "inlined named arrow function - multiline"
(${1}) => {
	${2}
}
endsnippet

snippet af "arrow function"
const ${1} = (${2}) => {
	${3}
};
endsnippet

snippet mem "member function"
${1}(${2}) {
	${3:${VISUAL}}
}
endsnippet

snippet class "class"
class ${1:Name} {
	constructor() {
	
	}

	${2}
}
endsnippet

snippet clax "derived class"
class ${1:Name} extends ${2:BaseClass} {
	constructor() {
		super();
	}

	${3}
}
endsnippet

snippet ctor "constructor"
constructor(${1}) {
	${2}
}
endsnippet

snippet reactcomp
import _ from 'lodash';
import React, {Component} from 'react';

export default class ${1:name} extends Component {
	static propTypes = {
	
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<div>

			</div>
		);
	}
}
endsnippet

snippet setState
this.setState({${1:body}});
endsnippet

snippet module
import _ from 'lodash';

export default function ${1:name}(${2:args}) {
	${3:body}
}
endsnippet

snippet lodash
import _ from 'lodash';
endsnippet

snippet redux
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
endsnippet

snippet react
import React from 'react';
endsnippet

snippet ex
export function ${1:name}(${2:args}) {
	${3:body}
}
endsnippet

snippet obj
const ${1:name} = {
	${2:properties}
};
endsnippet

snippet dest
const {${1:fields}} = ${2:source};
endsnippet

snippet proxy
return new Proxy({}, {
	get(/*target, propKey, receiver*/) {
		return function (/*...args*/) {
			return {};
		};
	}
});
endsnippet

snippet div
<div className='${2:class}'>
	${1:${VISUAL:body}}
</div>
endsnippet

snippet classnames
className={classNames('${1:baseClass}', {
	${2:conditionalClass}: ${3:true}
})}
endsnippet

snippet cl
console.log('${1}', ${2});
endsnippet

snippet connect
function mapStateToProps(state) {
    return {
        ${2}
    };
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators({
        ${3}
    }, dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName});
endsnippet

snippet ret
return (
	${VISUAL}
);
endsnippet

snippet ade
assert.deepEqual(${1}, ${2});
endsnippet

snippet ae
assert.equal(${1}, ${2});
endsnippet
