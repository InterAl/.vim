set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'pbogut/fzf-mru.vim'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'mxw/vim-jsx'
Plugin 'surround.vim'
Plugin 'mileszs/ack.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'InterAl/tcomment_vim'
Plugin 'Raimondi/delimitMate'
Plugin 'moll/vim-node'
Plugin 'kshenoy/vim-signature'
Plugin 'digitaltoad/vim-jade'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-dispatch'
Plugin 'bkad/CamelCaseMotion'
Plugin 'altercation/vim-colors-solarized'
Plugin 'google/vim-searchindex'
" Plugin 'leafgarland/typescript-vim'
Plugin 'w0rp/ale'
Plugin 'tpope/vim-repeat'
Plugin 'ap/vim-buftabline'
" Plugin 'YankRing.vim'
Plugin 'mhinz/vim-sayonara', { 'on': 'Sayonara' }
Plugin 'maksimr/vim-jsbeautify'
Plugin 'InterAl/vim-sdcv'
Plugin 'majutsushi/tagbar'
" Plugin 'tpope/vim-rsi' #breaks c-d in insert mode :\
Plugin 'ton/vim-bufsurf'
Plugin 'junegunn/goyo.vim'
" Plugin 'eclim'
" Plugin 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }

call vundle#end()
filetype plugin indent on    " required
filetype on
au BufNewFile,BufRead *.icss set filetype=css
au BufNewFile,BufRead *.es6 set filetype=javascript
au BufNewFile,BufRead *.ts set filetype=typescript.javascript
au BufNewFile,BufRead *.tsx set filetype=typescript.javascript.jsx
au BufNewFile,BufRead *.rt set filetype=html
set wildmenu
set wildmode=list:longest
set wildignore+=*/node_modules/*
set wildignore+=*/.git/*

"book mode
au BufRead *.book Book
command! Book call SetBook()

""""""""""""""""""""""""""""""""""""""""""""""""""""

function! SetBook()
    set foldcolumn=3
    set nornu
    set scrolloff=0
    set nosmartindent
    set textwidth=60
    map <C-F> <PageDown>
    map <C-B> <PageUp>
    map <leader>h :set t_ve=<CR>
    map <leader>s :set t_ve&<CR>
    set showtabline=0
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""

set noswapfile
set encoding=utf-8
syntax enable
set rnu
let mapleader=" "
set textwidth=80
set formatoptions-=t
set nowrap
set colorcolumn=+1
set ruler " show cursor position in status bar
set showmode
set noequalalways
" set cursorline
set re=1 "old regexp engine - faster syntax parsing?

"colors
set background=dark
set t_Co=256
let g:solarized_contrast = "normal"
let g:solarized_visibility="normal"
colorscheme solarized
highlight LineNr ctermfg=grey
highlight Pmenu ctermfg=241 ctermbg=254
highlight PmenuSel ctermfg=234 ctermbg=254
hi StatusLine ctermbg=50 ctermfg=23

"fix gf for typescript
augroup suffixes
    autocmd!

    let associations = [
        \["javascript,typescript.javascript.jsx,typescript.javascript", ".es6,.ts,.typescript,.tsx"]
    \]

    for ft in associations
        execute "autocmd FileType " . ft[0] . " setlocal suffixesadd=" . ft[1]
    endfor
augroup END

"tabs
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

"search
set nohls
set incsearch
set ignorecase
set smartcase
set wrapscan

"tags
set tags=tags;/
"update tags
command! Uptag exec "!ctags -R " . getcwd()

"scrolling
set scrolloff=0         "Start scrolling when we're 0 lines away from margins
set sidescrolloff=15
set sidescroll=1
set mouse=a
map <ScrollWheelUp> <C-Y>
map <ScrollWheelDown> <C-E>

"buffers
set hidden
nmap <leader>T :enew<cr>
nmap <leader>q :Sayonara!<cr>
nmap <leader>n :cn<CR>
nmap <leader>b :cp<CR>
nmap <leader>t :NERDTreeTabsToggle<CR>
nmap <leader>r :source ~/.vim/vimrc<CR>
nmap <leader>g :NERDTreeTabsFind<CR>
nmap ]b :bnext<CR>
nmap [b :bprev<CR>
nmap <C-M-h> :bprev<CR>
nmap <S-M-h> :bprev<CR>
nmap <C-M-l> :bnext<CR>
nmap <S-M-l> :bnext<CR>
nmap ]t :tabn<CR>
nmap [t :tabp<CR>
nmap ]n :cn<CR>
nmap [n :cp<CR>
nnoremap <bs> <c-^>
nmap <C-M-O> :BufSurfBack<CR>
nmap <C-M-I> :BufSurfForward<CR>
cmap w!! w !sudo tee % >/dev/null

"jump to module
nmap <leader>j gdf'gf

"find word usages (under cursor)
nmap <leader>u yiw:Ack <C-r>"<CR>

"delete __log
command! Rmlog :norm df)ds)

" command! ToRelative :!realpath --relative-to=%:p<CR>

nmap <C-S-f> :Ack<space>
map <S-y> "*y
nmap <leader>p "*p
nmap <leader><S-p> "*<S-p>
nnoremap <leader>d :BufOnly<CR>
vnoremap <C-h> :call RangeJsBeautify()<CR>

function! ToggleSyntax()
    if exists("g:syntax_on")
        syntax off
    else
        syntax on
    endif
endfunction

"useful remappings
command! W w
command! Q q
command! Q quit<bang>
command! Qa qa<bang>
command! WQ wq<bang>
command! Wq wq<bang>
command! WQ wq<bang>
command! -nargs=1 Dic call SearchWord(<f-args>)
nmap <F4> :let @* = expand("%:p")<CR>
nmap <F10> :cn<CR>
nmap <F11> :cp<CR>
nmap <F12> :call ToggleSyntax()<CR>
nmap <F2> :call SearchWord('n')<CR><C-W><C-P>
vmap <F2> :call SearchWord('v')<CR><C-W><C-P>
"close the last window
map <F3> <C-W><C-P><C-W><C-C>
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l:redraw!<CR>
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k

"scrolls a full page - by default vim scrolls a full page - 2
nmap <PageDown> <S-Down><C-E><C-E>H
nmap <PageUp> <S-Up><C-Y><C-Y>H

if bufwinnr(1)
    nnoremap ê <C-W>+
    nnoremap ë <C-W>-
    nnoremap ì <C-W><
    nnoremap è <C-W>>
endif

" open lines in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

" <leader>v brings up .vimrc
noremap <leader>v :e! $MYVIMRC<CR>

"CamelCaseMotion
call camelcasemotion#CreateMotionMappings('\')

"jsx
let g:jsx_ext_required = 0

"Syntastic
" let g:syntastic_javascript_checkers = ['eslint']

"UltiSnips
let g:UltiSnipsSnippetDirectories=["~/.vim/my-snippets", "my-snippets"]
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-e>"
let g:UltiSnipsJumpBackwardTrigger="<c-x>"
let g:UltiSnipsEditSplit="vertical"

"fzf
let fzf_history_file = getcwd() . '/' . '.fzf_history'
call system('touch ' . fzf_history_file)
execute 'nmap <C-n> :let $FZF_DEFAULT_COMMAND = ''find . -type f -o -path "*/node_modules" -prune -o -path "*/.git" -prune -o -path "*/dist" -prune''<cr>:FZF --reverse --history ' . fzf_history_file . '<cr>'
execute 'nmap <C-t> :let $FZF_DEFAULT_COMMAND = ''find . -type f -o -path "*/.git" -prune''<cr>:FZF --reverse --history ' . fzf_history_file . '<cr>'
execute 'nmap <C-p> :FZFMru --reverse --history ' . fzf_history_file . '<cr>'
" execute 'nmap <C-p> :History --reverse --history <cr>'

"nerd-tree-tabs
let NERDTreeIgnore=['node_modules']
let g:NERDTreeChDirMode = 2

set backspace=2

"YouCompleteMe
set shortmess+=c
set completeopt-=preview
let g:ycm_register_as_syntastic_checker = 0
nnoremap <leader>fd :YcmCompleter GoToType<CR>
nnoremap <leader>fp :YcmCompleter GetDoc<CR>
nnoremap <leader>ff :YcmCompleter GetType<CR>
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_global_ycm_extra_conf'

"vim-dispatch
autocmd FileType javascript let b:dispatch = 'mocha --watch --compilers js:babel-register --require ignore-styles --require spec/jsdomSetup.js'
nnoremap <F9> :Dispatch<CR>

"ALE
let g:ale_fixers = {
    \'typescript.javascript': ['tslint'],
    \'javascript': ['eslint']
\}

let g:ale_linters = {
\   'typescript.javascript': ['tslint'],
\   'javascript': ['eslint']
\}

let g:ale_sign_error = '>'

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

"YankRing
" this is so that single char deletes don't end up in the yankring
let g:yankring_min_element_length = 2
nnoremap <leader>y :YRShow<CR>
let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-n>'

"Gundo
" f5 toggles the Gundo plugin window
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width=80

"TS
set makeprg=tsc
set errorformat=%+A\ %#%f\ %#(%l\\\,%c):\ %m,%C%m

"ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ack_mappings = { "H": "", "h": "" }

"vim-indexed-search
let g:indexed_search_n_always_searches_forward = 0

"LanguageClient-neovim
" let g:LanguageClient_serverCommands = {
"     \ 'scala': [''],
"     \ }
"
" set omnifunc=syntaxcomplete#Complete
" set completefunc=syntaxcomplete#Complete
" let g:EclimCompletionMethod = 'omnifunc'
